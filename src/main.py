
#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç
"""
import asyncio
import json
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫—É src –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(str(Path(__file__).parent))

from parser import parse_yandex_card
from analyzer import analyze_card
from report import generate_html_report
from save_to_supabase import save_card_to_supabase


async def process_card(url: str, save_to_db: bool = True) -> dict:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É –∫–∞—Ä—Ç–æ—á–∫—É: –ø–∞—Ä—Å–∏—Ç, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    """
    print(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞—Ä—Ç–æ—á–∫–∏: {url}")
    
    # –®–∞–≥ 1: –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ä—Ç–æ—á–∫–∏
    print("üìä –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∏...")
    card_data = await parse_yandex_card(url)
    
    if not card_data:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–∞—Ä—Ç–æ—á–∫–∏")
        return None
    
    title = card_data.get('overview', {}).get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è')
    print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: {title}")
    
    # –®–∞–≥ 2: –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
    print("üî¨ –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∏...")
    analysis = analyze_card(card_data)
    print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    # –®–∞–≥ 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML-–æ—Ç—á–µ—Ç–∞
    print("üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML-–æ—Ç—á–µ—Ç–∞...")
    report_path = generate_html_report(card_data, analysis)
    print(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
    
    # –®–∞–≥ 4: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Supabase (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if save_to_db:
        print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        try:
            save_card_to_supabase(card_data)
            print("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Supabase")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É: {e}")
    
    return {
        'card_data': card_data,
        'analysis': analysis,
        'report_path': report_path
    }


async def process_multiple_cards(urls: list, save_to_db: bool = True) -> list:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫
    """
    results = []
    
    print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(urls)} –∫–∞—Ä—Ç–æ—á–µ–∫")
    
    for i, url in enumerate(urls, 1):
        print(f"\n--- –ö–∞—Ä—Ç–æ—á–∫–∞ {i}/{len(urls)} ---")
        try:
            result = await process_card(url, save_to_db)
            if result:
                results.append(result)
                print(f"‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ {i} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞—Ä—Ç–æ—á–∫–∏ {i}")
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞—Ä—Ç–æ—á–∫–∏ {i}: {e}")
            continue
    
    print(f"\nüéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(results)}/{len(urls)} –∫–∞—Ä—Ç–æ—á–µ–∫")
    return results


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    print("üåü Yandex Maps Card Parser & Analyzer v1.0")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) < 2:
        print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω URL –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python main.py <URL1> [URL2] [URL3] ...")
        print("–ü—Ä–∏–º–µ—Ä: python main.py https://yandex.ru/maps/org/...")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º URLs –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    urls = sys.argv[1:]
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º URLs
    valid_urls = []
    for url in urls:
        if 'yandex.ru/maps/org/' in url or 'yandex.com/maps/org/' in url:
            valid_urls.append(url)
        else:
            print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL: {url}")
    
    if not valid_urls:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö URLs –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        if len(valid_urls) == 1:
            # –û–¥–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞
            result = asyncio.run(process_card(valid_urls[0]))
            if result:
                print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:")
                print(f"   ‚Ä¢ –†–µ–π—Ç–∏–Ω–≥: {result['card_data'].get('overview', {}).get('rating', '–ù/–î')}")
                print(f"   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤: {result['card_data'].get('overview', {}).get('reviews_count', '–ù/–î')}")
                print(f"   ‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {len(result['card_data'].get('categories_full', []))}")
                print(f"   ‚Ä¢ –û—Ç—á–µ—Ç: {result['report_path']}")
        else:
            # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫
            results = asyncio.run(process_multiple_cards(valid_urls))
            if results:
                print(f"\nüìä –°–≤–æ–¥–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
                total_reviews = sum(r['card_data'].get('overview', {}).get('reviews_count', 0) or 0 for r in results)
                avg_rating = sum(float(r['card_data'].get('overview', {}).get('rating', 0) or 0) for r in results) / len(results)
                print(f"   ‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {total_reviews}")
                print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {avg_rating:.1f}")
                print(f"   ‚Ä¢ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤: {len(results)}")
    
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
